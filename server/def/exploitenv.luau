local UserInputService = game:GetService("UserInputService")
type ENV =  {
    crypt: {
        base64encode: (data: string) -> string,
        base64decode: (data: string) -> string,
        encrypt: (data: string, key: string, iv: string?, mode: string?) -> string,
        decrypt: (data: string, key: string, iv: string?, mode: string?) -> string,
        generatebytes: (size: number) -> string,
        generatekey: () -> string,
        hash: (data: string, algorithm: string) -> string,
        zstdcompress: (str: string) -> string,
        zstdddecompress: (str: string) -> string,
        lz4compress: (str: string) -> string,
        lz4decompress: (str: string) -> string,
    },
    
    cache: {
        replace: (x: Instance, y: Instance) -> (),
        invalidate: (x: Instance) -> (),
        iscached: (x: Instance) -> boolean,
        cloneref: (x: Instance) -> Instance,
        compareinstances: (x: Instance, y: Instance) -> boolean
    },
    
    websocket: {
        connect: (url: string) -> Socket,
    },
    
    debug: {
        getconstant: (func: variant<func, number>, index: number) -> any,
        getconstants: (func: variant<func, number>) -> table,
        getinfo: (func: variant<func, number>) -> table,
        getproto: (func: variant<func, number>, index: number, active: boolean?) -> variant<func, table>,
        getprotos: (func: variant<func, number>) -> table,
        getstack: (level: number, index: number?) -> table,
        getupvalue: (func: variant<func, number>, index: number?) -> any,
        getupvalues: (func: variant<func, number>) -> table,
        setconstant: (func: variant<func, number>, index: number, value: any) -> (),
        setstack: (func: variant<func, number>, index: number, value: any) -> (),
        setupvalue: (func: variant<func, number>, index: number, value: any) -> (),
        validlevel: (func: variant<func, number>) -> boolean
    },
    
    drawing: {
        new: (type: string) -> Drawing
    },
    
    cleardrawcache: () -> (),
    getrenderproperty: (drawing: Drawing, property: string) -> any,
    isrenderobj: (object: any) -> boolean,
    setrenderproperty: (drawing: Drawing, property: string, value: any) -> (),

    memorystats: {
        cache: (tag: string) -> (),
        restore: (tag: string) -> (),
        getusagebyname: (tag: string) -> number
    },

    setthreadcaps: (identity: number) -> (),
    setclosurecaps: (closure: func, identity: number) -> (),
    getthreadcaps: () -> number,
    getclosurecaps: (closure: func) -> number,


    getscriptbytecode: (script: script) -> string,
    getscripthash: (script: script) -> string,
    getcallingscript: () -> script,
    getscriptfromthread: (t: thread) -> script,
    getscriptclosure: (script: script) -> func,
    
    isrbxactive: () -> boolean,
    setclipboard: (data: string) -> (),

    keypress: (key: number) -> (),
    keyrelease: (key: number) -> (),
    keyclick: (key: number) -> (),

    mouse1press: () -> (),
    mouse1release: () -> (),
    mosue1click: () -> (),
    
    mouse2press: () -> (),
    mouse2release: () -> (),
    mosue2click: () -> (),

    mousescroll: (pixels: int) -> (),
    mousemoverel: (pixelsX: int, pixelsY: int) -> (),
    mousemoveabs: (pixelsX: int, pixelsY: int) ->(),

    firesignal: (signal: RBXScriptSignal) -> (),
    getconnections: (signal: RBXScriptSignal) -> table,

    readfile: (path: string) -> string,
    writefile: (path: string, data: string) -> (),
    appendfile: (path: string, data: string) -> (),
    loadfile: (path: string, chunkname: string?) -> (func?, string?),
    runfile: (path: string) -> func,
    listfiles: (path: string) -> table,
    isfile: (string: file) -> boolean,
    isfolder: (string: folder) -> boolean,
    makefolder: (string: folder) -> (),
    delfolder: (string: folder) -> (),
    getcustomasset: (path: string, noCache: boolean) -> string,

    clonefunction: (func: func) -> func,
    newcclosure: (func: func) -> func,
    hookfunction: (func: func, hook: func) -> func,
    isfunctionhooked: (func: func) -> boolean,
    restorefunction: (func: func) -> (),


    getfpscap: () -> number,
    setfpscap: (fps: number) -> number,
    gethwid: () -> string,
    getnamecallmethod: () -> string,
    setnamecallmethod: (string: name) -> (),

    gettenv: (t: thread) -> table,
    getgenv: () -> table,
    getrenv: () -> table,
    getreg: () -> table,
    getgc: (everything: boolean) -> table,
    getcallbackvalue: (inst: Instance, callback: string) -> func?,
    request: (options: HttpRequest) -> HttpResponse,

    saveinstance: (instance: variant<Instance, table<Instance>>, options: table) -> (),
    saveplace: (options: SavePlaceOptions) -> (),

    loadstring: (script: string, chunkname: string?) -> func,
    checkcaller: () -> boolean,
    islclosure: (func: func) -> boolean,
    iscclosure: (func: func) -> boolean,
    getinstances: () -> (),
    getnilinstances: () -> (),
    getscripts: () -> (),
    getmodules: () -> (),
    queue_on_teleport: (script: string) -> (),
    clear_teleport_queue: () -> (),
    fireclickdetector: (instance: Instance, distance: number?, event: string?) -> (),
    fireproximityprompt: (object: Instance) -> (),
    firetouchtransmitter: (toTouch: Instance, Toucher: INstance, touch: int) -> (),
    getfflag: (fflag: string) -> (),
    setfflag: (fflag: string, value: string) -> (),
    isnetworkowner:  (part: Instance) -> boolean,
    setscriptable: (object: Instance, property: string, value: boolean) -> boolean,
    isscriptable: (object: Instance, property: string) -> boolean,
    gethiddenproperties: (object: Instance) -> table,
    sethiddenproperty: (object: Instance, property: string, value: any) -> (),
    gethiddenproperty: (object: Instance, property: string) -> any,
    setsimulatioinradius: (radius: number) -> (),
    identifyexecutor: () -> string,
    gethui: () -> Instance,
    setthreadidentity: (identity: number) -> (),
    getthreadidentity: () -> number,
    isexecutorclosure: (func: func) -> boolean,
}

type Drawing = {
    Radius: number,
    ZIndex: number,
    Color: Color3,
    Filled: boolean,
    NumSides: number,
    Position: Vector2,
    Transparency: number,
    Visible: boolean,
    From: Vector2,
    To: Vector2,
    Thickness: number,
    Text: string,
    TextBounds: Vector2,
    Font: Font,
    Size: number,
    Center: boolean,
    Outline: boolean,
    OutlineColor: Color3,
    Data: string,
    Rounding: boolean,
    Thickness: number,
    Filled: boolean,
    PointA: Vector2,
    PointB: Vector2,
    PointC: Vector2,
    PointD: Vector2, 
    Destroy: () -> ()
}

type Socket = {
    Send: (msg: string) -> (),
    Close: () -> (),
    OnMessage: Event,
    OnClose: Event
}

type HttpRequest = {
    Url: string,
    Method: string,
    Body: string,
    Headers: table,
    Cookies: table
}

type HttpResponse = {
    Body: string,
    StatusCode: number,
    StatusMessage: string,
    Success: boolean,
    Headers: table
}

type SavePlaceOptions = {
    FileName: string,
    IgnoreArchivable: boolean,
    SavePlayers: boolean,
    DisableCompression: boolean,
    SaveNonCreatable: boolean,
    CopyToClipboard: boolean
}