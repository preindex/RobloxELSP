local UserInputService = game:GetService("UserInputService")
type ENV =  {
    crypt: {
        base64encode: (data: string) -> string,
        base64decode: (data: string) -> string,
        encrypt: (data: string, key: string, iv: string?, mode: string?) -> string,
        decrypt: (data: string, key: string, iv: string?, mode: string?) -> string,
        generatebytes: (size: number) -> string,
        generatekey: () -> string,
        hash: (data: string, algorithm: string) -> string,
        zstdcompress: (str: string) -> string,
        zstdddecompress: (str: string) -> string,
        lz4compress: (str: string) -> string,
        lz4decompress: (str: string) -> string,
    },
    
    cache: {
        replace: (x: Instance, y: Instance) -> (),
        invalidate: (x: Instance) -> (),
        iscached: (x: Instance) -> boolean,
        cloneref: (x: Instance) -> Instance,
        compareinstances: (x: Instance, y: Instance) -> boolean
    },
    
    websocket: {
        connect: (url: string) -> Socket,
    },
    
    debug: {
        getconstant: (func: variant<func, number>, index: number) -> any,
        getconstants: (func: variant<func, number>) -> table,
        getinfo: (func: variant<func, number>) -> table,
        getproto: (func: variant<func, number>, index: number, active: boolean?) -> variant<func, table>,
        getprotos: (func: variant<func, number>) -> table,
        getstack: (level: number, index: number?) -> table,
        getupvalue: (func: variant<func, number>, index: number?) -> any,
        getupvalues: (func: variant<func, number>) -> table,
        setconstant: (func: variant<func, number>, index: number, value: any) -> (),
        setstack: (func: variant<func, number>, index: number, value: any) -> (),
        setupvalue: (func: variant<func, number>, index: number, value: any) -> (),
        validlevel: (func: variant<func, number>) -> boolean
    },
    
    drawing: {
        new: (type: string) -> Drawing
    },
    
    cleardrawcache: () -> (),
    getrenderproperty: (drawing: Drawing, property: string) -> any,
    isrenderobj: (object: any) -> boolean,
    setrenderproperty: (drawing: Drawing, property: string, value: any) -> (),

    memorystats: {

    },

    setthreadcaps: (identity: number) -> (),
    setclosurecaps: (closure: func, identity: number) -> (),
    getthreadcaps: () -> number,
    getclosurecaps: (closure: func) -> number,


}

type Socket = {
    Send: (msg: string) -> (),
    Close: () -> (),
    OnMessage: Event,
    OnClose: Event
}